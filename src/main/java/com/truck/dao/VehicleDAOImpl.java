

package com.truck.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Component;

import com.truck.domain.Quote;
import com.truck.domain.Userdetails;
import com.truck.security.Encryption;
import com.truck.util.AutoGeneratedKey;
import com.truck.util.TruckUtil;

@Component
public class VehicleDAOImpl implements VehicleDAO {
	
	private final String ADD_QUOTE = "INSERT INTO truckdb.quote(amount,vehicle,information,vclid,itemid,isflexible,expdate,colfromdate,coltodate,delfromdate,deltodate) values(:amount,:vehicle,:information,:vclid,:itemid,:isflexible,:expdate,:colfromdate,:coltodate,:delfromdate,:deltodate)";
	 
	private final String GET_QUOTE_BY_ITEM_ID="SELECT a.id,a.amount,a.vehicle,a.timescale,a.information,b.email,b.shortname  FROM truckdb.quote a,truckdb.user b where a.vclid=b.id and itemid=:itemid";
	
	private final String GET_QUOTE_BY_USER_ID="SELECT a.id,a.amount,a.vehicle,a.timescale,a.information,b.email,c.description,c.coladdress,c.deladdress  FROM truckdb.quote a,truckdb.user b,truckdb.items c where c.id=a.itemid and c.userid=:userid and a.expdate > curdate() and b.id=:userid";
	
	private final String GET_ACCEPT_QUOTE_BY_USER_ID="SELECT a.id,a.itemid,a.amount,a.vehicle,a.timescale,a.information,a.itemid,a.vclid,b.email,c.description,c.coladdress,c.deladdress,b.shortname,a.creates,a.isaccept  FROM truckdb.quote a,truckdb.user b,truckdb.items c where c.id=a.itemid and b.id=a.vclid  and a.vclid=:vclid";
	
	private final String GET_QUOTE_BY_VCL_USER_ID="SELECT a.id,a.amount,a.vehicle,a.timescale,a.information,a.isaccept,b.email  FROM truckdb.quote a,truckdb.user b,truckdb.items c where c.id=a.itemid and  b.id=:vclid";
	
	private final String GET_LOWEST_PRICE_QUOTE_BY_ITEM_ID="SELECT a.id,min(a.amount)as amount,a.vehicle,a.timescale,a.information,b.email,b.shortname  FROM truckdb.quote a,truckdb.user b where a.vclid=b.id and itemid=:itemid";
	
	private final String GET_ACCEPT_QUOTE_FOR_FEEDBACK="SELECT a.id,a.itemid,a.amount,a.vehicle,a.timescale,a.information,a.itemid,a.vclid,b.email,c.description,c.coladdress,c.deladdress,b.shortname,a.creates,a.isaccept  FROM truckdb.quote a,truckdb.user b,truckdb.items c where c.id=a.itemid and b.id=c.userid  and c.userid=:userid and a.isaccept=1 and a.id not in (select quoteid from truckdb.starrating)";
	
	private final String GET_EXPIRED_QUOTES="SELECT a.id,a.itemid,a.amount,a.vehicle,a.timescale,a.information,a.itemid,a.vclid,b.email,c.description,c.coladdress,c.deladdress,b.shortname,a.creates,a.isaccept  FROM truckdb.quote a,truckdb.user b,truckdb.items c where c.id=a.itemid and b.id=a.vclid and a.expdate > curdate()  and a.vclid=:vclid";
	

	private final String GET_USERDETAILS_BY_USERID="SELECT a.shortname,a.username,b.mobile,b.firstname,b.lastname,b.city,b.address1,b.address2,b.companyname,b.taxnumber,b.vehiclenumber,c.country_name as country,b.postcode FROM truckdb.user a,truckdb.userdetails b,truckdb.countries c where a.id=:userid and a.id=b.userid and b.country=c.id";
	
	
	private final String UPDATE_USER_DETAILS_TP="update truckdb.userdetails set firstname=:firstname,lastname=:lastname,companyname=:companyname,taxnumber=:taxnumber,vehiclenumber=:vehiclenumber,city=:city,address1=:address1,address2=:address2,postcode=:postcode where userid=:userid";
	
	@Autowired
	private NamedParameterJdbcTemplate namedParmJdbcTemplate;
	
	Encryption encpSha=new Encryption();
	@Override
	public long addQuote(Quote quote) {
		// TODO Auto-generated method stub	
		
		  Map<String, String> paramMap = new HashMap<String, String>();
	        
			paramMap.put("amount",quote.getAmount());
			paramMap.put("vehicle",quote.getVehicle());
			//paramMap.put("timescale", quote.getTimescale());
			paramMap.put("information",quote.getInformation());
			paramMap.put("vclid", String.valueOf(quote.getUserid()));
			paramMap.put("itemid", String.valueOf(quote.getItemid()));	
			paramMap.put("colfromdate",String.valueOf(TruckUtil.getSqlDate((quote.getColfromdate()))));
			paramMap.put("coltodate",String.valueOf(TruckUtil.getSqlDate((quote.getColtodate()))));
			paramMap.put("delfromdate", String.valueOf(TruckUtil.getSqlDate((quote.getDelfromdate()))));
			paramMap.put("deltodate",String.valueOf(TruckUtil.getSqlDate((quote.getDeltodate()))));			
			paramMap.put("isflexible",quote.getIsflexible());
			paramMap.put("expdate",  String.valueOf(TruckUtil.getSqlDate((quote.getExpdate()))));
			SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
			AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
			namedParmJdbcTemplate.update(ADD_QUOTE, paramSource, genKey.getHolder(), genKey.getPKName("id"));
			return genKey.getValue();
		
		
	}

	@Override
	public List<Quote> retriveQuoteByItemID(int id) {
		// TODO Auto-generated method stub
	//	return null;
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_QUOTE_BY_ITEM_ID, paramMap,new BeanPropertyRowMapper<Quote>(Quote.class));

	}

	@Override
	public List<Quote> retriveQuoteByUserID(int id) {
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("userid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_QUOTE_BY_USER_ID, paramMap,new BeanPropertyRowMapper<Quote>(Quote.class));
		
	}

	@Override
	public List<Quote> retriveAcceptQuoteByUserID(int userid) {
		// TODO Auto-generated method stub
		//return null;
		
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("vclid", String.valueOf(userid));
		return namedParmJdbcTemplate.query(GET_ACCEPT_QUOTE_BY_USER_ID, paramMap,new BeanPropertyRowMapper<Quote>(Quote.class));

	}

	@Override
	public List<Quote> retriveQuoteByVCLUserID(int id) {
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("vclid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_QUOTE_BY_VCL_USER_ID, paramMap,new BeanPropertyRowMapper<Quote>(Quote.class));

	}

	@Override
	public List<Quote> getQuoteLowestPriceByItemID(int id) {
		// TODO Auto-generated method stub 
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_LOWEST_PRICE_QUOTE_BY_ITEM_ID, paramMap,new BeanPropertyRowMapper<Quote>(Quote.class));

	}

	@Override
	public List<Quote> retriveQuoteForFeedBack(int id) {
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("userid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_ACCEPT_QUOTE_FOR_FEEDBACK, paramMap,new BeanPropertyRowMapper<Quote>(Quote.class));
		
	}

	@Override
	public List<Quote> retriveExpiredQuoteByUserID(int id) {
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("vclid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_EXPIRED_QUOTES, paramMap,new BeanPropertyRowMapper<Quote>(Quote.class));

	}

	@Override
	public List<Userdetails> getVclOwnerDetailsByID(int id) {
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("userid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_USERDETAILS_BY_USERID, paramMap,new BeanPropertyRowMapper<Userdetails>(Userdetails.class));
		
	}

	@Override
	public void updateVclProfile(Userdetails userdetails, int id) {
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("userid", String.valueOf(id));
	//	paramMap.put("email", userdetails.getEmail());
		paramMap.put("firstname", userdetails.getFirstname());
		paramMap.put("lastname",userdetails.getLastname());
	//	paramMap.put("telephone",userdetails.getTelephone());
		paramMap.put("mobile",userdetails.getMobile());
		paramMap.put("city", userdetails.getCity());
	//	paramMap.put("country", userdetails.getCountry());
		paramMap.put("address1",userdetails.getAddress1());
		paramMap.put("address2",userdetails.getAddress2());
		paramMap.put("companyname",userdetails.getCompanyname());
		paramMap.put("postcode",userdetails.getPostcode());
		paramMap.put("taxnumber",userdetails.getTaxnumber());
		paramMap.put("vehiclenumber",userdetails.getVehiclenumber());
		
		
		namedParmJdbcTemplate.update(UPDATE_USER_DETAILS_TP,paramMap);
		
		
	}
	
	
}

