package com.truck.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Component;

import com.truck.domain.Boatitem;
import com.truck.domain.Caritem;
import com.truck.domain.Category;
import com.truck.domain.Countries;
import com.truck.domain.Fragilegoodsitem;
import com.truck.domain.Furnitureitem;
import com.truck.domain.Generalitem;
import com.truck.domain.Haulageitem;
import com.truck.domain.Homeitem;
import com.truck.domain.ItemImages;
import com.truck.domain.Items;
import com.truck.domain.Livestockitem;
import com.truck.domain.Messages;
import com.truck.domain.Motorcyclesitem;
import com.truck.domain.Otheritem;
import com.truck.domain.Starrating;
import com.truck.domain.Subcategory;
import com.truck.domain.Userdetails;
import com.truck.domain.Users;
import com.truck.domain.Vechicleandparts;
import com.truck.domain.Vechicleowner;
import com.truck.security.Encryption;
import com.truck.util.AutoGeneratedKey;
import com.truck.util.Crawl;
import com.truck.util.TruckDbUtil;

@Component
public class WebDAOImpl implements WebDAO
{

	@Autowired
	private NamedParameterJdbcTemplate namedParmJdbcTemplate;

	Encryption encpSha = new Encryption();

	// Search

	private final String COUNTRY_SEARCH =
			"SELECT a.itemdetailsid,a.coladdress,a.deladdress,a.creates,a.creates as diffdays,a.itemtypeid,a.itemdetailsid,a.millage,a.map,a.photos,a.description,(select count(c.itemid) from truckdb.quote c where a.id=c.itemid) as numquote,a.id FROM truckdb.items a  where a.itemtypeid in (:itemtypeid) and a.colcountry in (:colcountry) and a.delcountry in (:delcountry) order by a.id desc";

	private final String COUNTRY_SEARCH_FOR_TOTAL_COUNT =
			"SELECT count(a.id) as totalcount FROM truckdb.items a  where a.itemtypeid in (:itemtypeid) and a.colcountry in (:colcountry) and a.delcountry in (:delcountry)";

	private final String ROUTE_SEARCH =
			"SELECT a.itemdetailsid,a.coladdress,a.deladdress,a.creates,a.creates as diffdays,a.itemtypeid,a.itemdetailsid,a.millage,a.map,a.photos,a.description,(select count(c.itemid) from truckdb.quote c where a.id=c.itemid) as numquote,a.id FROM truckdb.items a  where a.itemtypeid in (:itemtypeid) and a.colcountry in (:colcountry) and a.delcountry in (:delcountry) and a.millage>:millagegreater and a.millage <:millageless and a.colpostcode=:colpostcode and a.delpostcode=:delpostcode order by a.id desc";

	private final String ROUTE_SEARCH_FOR_TOTAL_COUNT =
			"SELECT count(a.id) as totalcount FROM truckdb.items a  where a.itemtypeid in (:itemtypeid) and a.colcountry in (:colcountry) and a.delcountry in (:delcountry) and a.millage>:millagegreater and a.millage <:millageless and a.colpostcode=:colpostcode and a.delpostcode=:delpostcode ";

	private final String LOCAL_SEARCH =
			"SELECT a.itemdetailsid,a.coladdress,a.deladdress,a.creates,a.creates as diffdays,a.itemtypeid,a.itemdetailsid,a.millage,a.map,a.photos,a.description,(select count(c.itemid) from truckdb.quote c where a.id=c.itemid) as numquote,a.id FROM truckdb.items a  where a.itemtypeid in (:itemtypeid) and a.colpostcode=:postcode or a.delpostcode=:postcode  order by a.id desc";

	private final String LOCAL_SEARCH_FOR_TOTAL_COUNT =
			"SELECT count(a.id) as totalcount FROM truckdb.items a  where a.itemtypeid in (:itemtypeid) and a.colpostcode=:postcode or a.delpostcode=:postcode";

	// Users

	private final String ADD_USER_SIGNUP =
			"INSERT INTO truckdb.user(username,email,password,shortname,role) values(:username,:email,:password,:shortname,:role)";

	private final String ADD_USER =
			"INSERT INTO truckdb.user(username,role,password,email,isactive) values(:username,:role,:password,:email,:isactive)";

	private final String ADD_USER_DETAILS =
			"INSERT INTO truckdb.userdetails(firstname,lastname,telephone,mobile,email,userid) values(:firstname,:lastname,:telephone,:mobile,:email,:userid)";

	private final String GET_SHORTNAME_BY_MAIL =
			"select shortname from user where username=:username";

	private final String ADD_USER_DETAILS_TP =
			"INSERT INTO truckdb.userdetails(firstname,lastname,telephone,mobile,email,userid,city,country,address1,address2,companyname,postcode,taxnumber,vehiclenumber) values(:firstname,:lastname,:telephone,:mobile,:email,:userid,:city,:country,:address1,:address2,:companyname,:postcode,:taxnumber,:vehiclenumber)";

	private final String GET_USERDETAILS_BY_USERNAME =
			"SELECT a.shortname,a.creates,b.companyname,sum(CASE WHEN numstar = 1 THEN 1 ELSE 0 END ) star1,sum(CASE WHEN numstar = 2 THEN 1 ELSE 0 END ) star2,sum(CASE WHEN numstar = 3 THEN 1 ELSE 0 END ) star3, sum(CASE WHEN numstar = 4 THEN 1 ELSE 0 END ) star4, sum(CASE WHEN numstar = 5 THEN 1 ELSE 0 END ) star5 FROM truckdb.user a,truckdb.userdetails b,truckdb.quote c,truckdb.starrating d where a.id=b.userid and d.quoteid=c.id and c.vclid=a.id and a.shortname=:shortname";

	private final String GET_USER_DETAILS_BY_ID =
			"select a from truckdb.userdetails(firstname,lastname,telephone,mobile,email,userid,city,country,address1,address2,companyname,postcode,taxnumber,vehiclenumber) values(:firstname,:lastname,:telephone,:mobile,:email,:userid,:city,:country,:address1,:address2,:companyname,:postcode,:taxnumber,:vehiclenumber)";

	// Vechicle Owner Signup

	private final String ADD_VOSIGNUP =
			"INSERT INTO truckdb.vechicleowner(username,email,password) values(:username,:email,:password)";

	// ADD ITEMS

	private final String ADD_ITEMS =
			"INSERT INTO truckdb.items(description,itemdetailsid,userid,colpostcode,colcountry,delpostcode,delcountry,photos,millage,coladdress,deladdress,map,itemtypeid) values(:description,:itemdetailsid,:userid,:colpostcode,:colcountry,:delpostcode,:delcountry,:photos,:millage,:coladdress,:deladdress,:map,:itemtypeid)";

	private final String RETRIVE_ITEMS =
			"SELECT a.itemdetailsid,a.coladdress,a.deladdress,a.creates,a.creates as diffdays,a.itemtypeid,a.itemdetailsid,a.millage,a.map,a.photos,a.description,(select count(c.itemid) from truckdb.quote c where a.id=c.itemid) as numquote,a.id FROM truckdb.items a order by a.id desc";

	private final String RETRIVE_ITEMS_LIMIT =
			"SELECT a.itemdetailsid,a.coladdress,a.deladdress,a.creates,a.creates as diffdays,a.itemtypeid,a.itemdetailsid,a.millage,a.map,a.photos,a.description,(select count(c.itemid) from truckdb.quote c where a.id=c.itemid) as numquote,a.id FROM truckdb.items a order by a.id desc";

	private final String RETRIVE_ITEMS_TOTAL_COUNT =
			"SELECT count(id) as totalitem from truckdb.items";

	private final String RETRIVE_RECENT_DELIVERYS =
			"SELECT a.id,a.itemid,a.amount,a.vehicle,a.timescale,a.information,a.itemid,a.vclid,b.email,c.description,c.coladdress,c.deladdress,c.millage,b.shortname,a.creates,a.creates as diffdays,a.isaccept  FROM truckdb.quote a,truckdb.user b,truckdb.items c where c.id=a.itemid and b.id=c.userid order by a.creates desc limit 0,10";

	private final String RETRIVE_UPGRADE_ITEMS =
			"SELECT a.itemdetailsid,a.coladdress,a.deladdress,a.creates,a.creates as diffdays,a.itemtypeid,a.itemdetailsid,a.millage,a.map,a.photos,a.description,(select count(c.itemid) from truckdb.quote c where a.id=c.itemid) as numquote,a.id FROM truckdb.items a where a.priority=1 order by a.id desc limit 0,3 ";

	private final String GET_ITEMS_BY_ID =
			"SELECT a.itemdetailsid,a.coladdress,a.deladdress,a.creates,a.creates as diffdays,a.itemtypeid,a.itemdetailsid,a.millage,a.map,a.photos,a.id,"
					+ "a.description,b.shortname,a.userid FROM truckdb.items a,truckdb.user b where a.userid=b.id and a.id=:id";

	// Furniture

	private final String ADD_FURNITURE =
			"INSERT INTO truckdb.furnitureitem(description,length,width,height,weight,itemid) values(:description,:length,:width,:height,:weight,:itemid)";

	private final String GET_FURNITURE_BY_ID =
			"select * from truckdb.furnitureitem where id=:id";

	private final String GET_FURNITURE_BY_ITEM_ID =
			"select * from truckdb.furnitureitem where itemid=:itemid";

	// GENERAL ITEM

	private final String ADD_GENERAL =
			"INSERT INTO truckdb.generalitem(subcategory,description,length,width,height,weight,itemid) values(:subcategory,:description,:length,:width,:height,:weight,:itemid)";

	private final String GET_GENERAL_BY_ID =
			"select * from truckdb.generalitem where id=:id";

	private final String GET_GENERAL_BY_ITEM_ID =
			"select * from truckdb.generalitem where itemid=:itemid";

	// Car ITEM

	private final String ADD_CAR =
			"INSERT INTO truckdb.caritem(description,make,model,modeofmoving,itemid) values(:description,:make,:model,:modeofmoving,:itemid)";

	private final String GET_CAR_BY_ID =
			"select * from truckdb.caritem where id=:id";

	private final String GET_CAR_BY_ITEM_ID =
			"select * from truckdb.caritem where itemid=:itemid";

	// MOTORCYCLE ITEM

	private final String ADD_MOTORCYCLE =
			"INSERT INTO truckdb.motorcyclesitem(description,make,model,modeofmoving,itemid) values(:description,:make,:model,:modeofmoving,:itemid)";

	private final String GET_MOTORCYCLE_BY_ID =
			"select * from truckdb.motorcyclesitem where id=:id";

	private final String GET_MOTORCYCLE_BY_ITEM_ID =
			"select * from truckdb.motorcyclesitem where itemid=:itemid";

	// VEHICLEANDPARTS ITEM

	private final String ADD_VEHICLEANDPARTS =
			"INSERT INTO truckdb.vechicleandparts(subcategory,description,vechicledescription,length,width,height,weight,itemid,ontrailer) values(:subcategory,:description,:vechicledescription,:length,:width,:height,:weight,:itemid,:ontrailer)";

	private final String GET_VEHICLEANDPARTS_BY_ID =
			"select * from truckdb.vechicleandparts where id=:id";

	private final String GET_VEHICLEANDPARTS_BY_ITEM_ID =
			"select * from truckdb.vechicleandparts where itemid=:itemid";

	// HOME ITEM

	private final String ADD_HOME =
			"INSERT INTO truckdb.homeitem(propertytype,movingdate,numrooms,numfloors,elevator,packinghelp,loadinghelp,itemid) values(:propertytype,:movingdate,:numrooms,:numfloors,:elevator,:packinghelp,:loadinghelp,:itemid)";

	private final String GET_HOME_BY_ID =
			"select * from truckdb.homeitem where id=:id";

	private final String GET_HOME_BY_ITEM_ID =
			"select * from truckdb.homeitem where itemid=:itemid";

	// BOATS ITEM

	private final String ADD_BOATS =
			"INSERT INTO truckdb.boatsitem(subcategory,description,typeofboat,length,typeofkeel,itemid,ontrailer) values(:subcategory,:description,:typeofboat,:length,:typeofkeel,:itemid,:ontrailer)";

	private final String GET_BOATS_BY_ID =
			"select * from truckdb.boatsitem where id=:id";

	private final String GET_BOATS_BY_ITEM_ID =
			"select * from truckdb.boatsitem where itemid=:itemid";

	// HAULAGE ITEM

	private final String ADD_HAULAGE =
			"INSERT INTO truckdb.haulageitem(subcategory,description,haulagedescription,packagedescription,relevantitem,itemid,weight) values(:subcategory,:description,:haulagedescription,:packagedescription,:relevantitem,:itemid,:weight)";

	private final String GET_HAULAGE_BY_ID =
			"select * from truckdb.haulageitem where id=:id";

	private final String GET_HAULAGE_BY_ITEM_ID =
			"select * from truckdb.haulageitem where itemid=:itemid";

	// FRAGILE GOODS ITEM

	private final String ADD_FRAGILEGOODS =
			"INSERT INTO truckdb.fragilegoodsitem(subcategory,description,fragiledescription,length,width,height,weight,itemid) values(:subcategory,:description,:fragiledescription,:length,:width,:height,:weight,:itemid)";

	private final String GET_FRAGILEGOODS_BY_ID =
			"select * from truckdb.fragilegoodsitem where id=:id";

	private final String GET_FRAGILEGOODS_BY_ITEM_ID =
			"select * from truckdb.fragilegoodsitem where itemid=:itemid";

	// LIVESTOCK ITEM

	private final String ADD_LIVESTOCK =
			"INSERT INTO truckdb.livestockitem(subcategory,description,breed,numitems,weight,itemid,width,height,length) values(:subcategory,:description,:breed,:numitems,:weight,:itemid,:width,:height,:length)";

	private final String GET_LIVESTOCK_BY_ID =
			"select * from truckdb.livestockitem where id=:id";

	private final String GET_LIVESTOCK_BY_ITEM_ID =
			"select * from truckdb.livestockitem where itemid=:itemid";

	// OTHERS ITEM

	private final String ADD_OTHER =
			"INSERT INTO truckdb.otheritem(description,length,width,height,weight,itemid) values(:description,:length,:width,:height,:weight,:itemid)";

	private final String GET_OTHER_BY_ID =
			"select * from truckdb.otheritem where id=:id";

	private final String GET_OTHER_BY_ITEM_ID =
			"select * from truckdb.otheritem where itemid=:itemid";

	// Countr-

	private final String RETRIVE_COUNTRIES = "select * from truckdb.countries";

	// Message Service

	private final String ADD_MESSAGE =
			"insert into truckdb.messages(proownerid,vclid,quoteid,message,itemid,messageid)values(:proownerid,:vclid,:quoteid,:message,:itemid,:messageid)";

	private final String ADD_MESSAGE_DETAILS =
			"insert into truckdb.messagedetails(messageuid,message,messageid,userid)values(:messageuid,:message,:messageid,:userid)";

	private final String RETRIVE_MESSAGE_GROUP_BY_MESSAGE_ID =
			"SELECT a.id,a.messageid,b.shortname,c.message,c.creates FROM truckdb.messages a, user b,messagedetails c where a.vclid=b.id and c.messageuid=a.messageid  and a.messageid=:messageid group by a.messageid";

	private final String RETRIVE_MESSAGE_BY_MESSAGE_ID =
			"SELECT a.id,a.vclid,a.itemid,a.proownerid,a.messageid,b.shortname,c.message,c.creates,c.userid,d.description as subjects FROM truckdb.messages a, user b,messagedetails c,items d where c.userid=b.id and d.id=a.itemid  and c.messageuid=a.messageid  and c.isflag=0 and a.messageid=:messageid";

	private final String RETRIVE_MESSAGE_BY_ITEM_VCL_ID =
			"SELECT a.messageid,b.shortname,c.message,c.creates,c.id FROM truckdb.messages a, user b,messagedetails c where a.vclid=b.id and c.messageuid=a.messageid and a.itemid=:itemid and c.isflag=0 and a.vclid=:vclid ";

	private final String RETRIVE_MESSAGE_BY_ITEM_PRO_ID =
			"SELECT a.messageid,b.shortname,c.message,c.creates,c.id FROM truckdb.messages a, user b,messagedetails c where a.proownerid=b.id and c.messageuid=a.messageid and a.itemid=:itemid and c.isflag=0 and a.proownerid=:proownerid ";

	private final String RETRIVE_MESSAGE_BY_PRO_ID =
			"SELECT a.id,b.shortname,c.description as subjects,d.messageuid,d.creates,d.message,min(d.isread) as readmsg,d.id as msgdetailid,count(case when d.isread = 0 then d.isread end) as Inboxcount FROM truckdb.messages a, user b,items c,messagedetails d where a.vclid=b.id and a.itemid=c.id and a.messageid=d.messageuid and a.proownerid=:proownerid and d.userid!=:proownerid and d.isflag=0 group by d.messageuid  order by d.id desc";

	private final String RETRIVE_MESSAGE_BY_VCL_ID =
			"SELECT a.id,b.shortname,c.description as subjects,d.messageuid,d.creates,d.message,min(d.isread) as readmsg,d.id as msgdetailid,count(case when d.isread = 0 then d.isread end) as Inboxcount FROM truckdb.messages a, user b,items c,messagedetails d where a.proownerid=b.id and a.itemid=c.id and a.messageid=d.messageuid and a.vclid=:vclid and d.userid!=:vclid and d.isflag=0 group by d.messageuid  order by d.id desc";

	private final String RETRIVE_MESSAGE_BY_ITEM_ID =
			"select a.id,a.creates,b.shortname,c.description,d.messageuid from truckdb.messages a,user b,items c,messagedetails d where c.id=a.itemid and a.vclid=b.id and a.id=d.messageid and a.itemid=:itemid and d.isflag=0 group by d.messageuid  order by d.id desc";

	private final String UPDATE_MESSAGE_READ_BY_ID =
			"update truckdb.messagedetails set isread=1 where id=:id";

	private final String UPDATE_MESSAGE_READ_BY_MSG_ID =
			"update truckdb.messagedetails set isread=1 where messageuid=:messageuid";

	// update password

	private final String UPDATE_PASS =
			"update truckdb.user set password=:password where email=:email";

	private final String ACTIVE_ACCOUNT_BY_TOKEN =
			"update truckdb.user set isactive=1 where password=:password and creates < DATE_ADD(CURDATE(), INTERVAL 1 DAY) and id=:id";

	// Category

	private final String RETRIVE_CATEGORY =
			"select id,name,nameSL from truckdb.category";

	private final String RETRIVE_SUB_CATEGORY_BY_CATEGORY_ID =
			"select * from truckdb.subcategory where categoryid=:categoryid";

	// ITEM Images

	private final String ADD_IMAGE =
			"INSERT INTO truckdb.itemimages(itemid,itemdetailid,imagename) values(:itemid,:itemdetailid,:imagename)";

	private final String RETRIVE_IMAGE_BY_ITEM_ID =
			"select * from truckdb.itemimages where itemid=:itemid";

	private final String UPDATE_IMAGE_BY_ITEM_ID =
			"update truckdb.items set photos=:photos where id=:id";

	// star Rating

	private final String ADD_FEEDBACK =
			"insert into truckdb.starrating(quoteid,numstar,comments)values(:quoteid,:numstar,:comments)";

	// add TP Detals

	private final String ADD_TP =
			"INSERT INTO truckdb.tpdetails(deadline,tpfrom,tpto,length,weight,setup) values(:deadline,:tpfrom,:tpto,:length,:weight,:setup)";

	private final String RETRIVE_TPDETAILS = "select * from truckdb.tpdetails";

	private final String GET_FEEDBACK_USER_DETAILS =
			"SELECT  IFNULL(q.nos, 0) AS total, u.creates AS creates,  ud.firstname, u.username, ud.address1, ud.address2  FROM "
					+ " truckdb.user u"
					+ " INNER JOIN truckdb.userdetails ud ON u.id = ud.userid"
					+ " LEFT OUTER JOIN (SELECT COUNT(*) AS nos, vclid FROM quote  WHERE isaccept = 1 GROUP BY vclid) q "
					+ " ON q.vclid = u.id" + " WHERE u.id =:id";
	private final String GET_STARRATING_DETAILS =
			"SELECT "
					+ "IFNULL(SUM(IF(s.numstar = 1, 1, 0)), 0) AS oneStart, "
					+ "IFNULL(SUM(IF(s.numstar = 2, 1, 0)), 0) AS twoStart, "
					+ "IFNULL(SUM(IF(s.numstar = 3, 1, 0)), 0) AS threeStart,"
					+ "IFNULL(SUM(IF(s.numstar = 4, 1, 0)), 0) AS fourStart,"
					+ "IFNULL(SUM(IF(s.numstar = 5, 1, 0)), 0) AS fiveStart "
					+ "FROM truckdb.starrating s "
					+ "INNER JOIN (SELECT id FROM truckdb.quote WHERE vclid =:id AND isaccept = 1) AS q "
					+ "ON q.id = s.quoteid";
	private final String GET_STARRATIGN_COMMANDS_DETAILS =
			"SELECT s.comments, u.username, s.creates  FROM starrating s "
					+ "INNER JOIN (SELECT id, itemid FROM quote WHERE vclid =:id  AND isaccept = 1) AS q "
					+ "ON q.id = s.quoteid "
					+ "INNER JOIN items i ON q.itemid = i.id "
					+ "INNER JOIN user u ON i.userid = u.id";
	final String GET_ALL_COUNTRY = "Select * from countries";

	@Override
	public long addSignupTP(Vechicleowner vechicleowner)
	{
		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("username", vechicleowner.getEmail());
		paramMap.put("role", "vclOwner");
		paramMap.put(
				"password",
				encpSha.encode(vechicleowner.getPassword(),
						vechicleowner.getEmail()));
		paramMap.put("email", vechicleowner.getEmail());
		return namedParmJdbcTemplate.update(ADD_USER, paramMap);

		// return namedParmJdbcTemplate.update(ADD_VOSIGNUP, paramMap);
	}

	@Override
	public long addFurniture(Furnitureitem furnitureitem)
	{
		// TODO Auto-generated method stub

		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("description", furnitureitem.getDescription());
		paramMap.put("length",
				furnitureitem.getLength() + furnitureitem.getDimension());
		paramMap.put("height",
				furnitureitem.getHeight() + furnitureitem.getDimension());
		paramMap.put("width",
				furnitureitem.getWidth() + furnitureitem.getDimension());
		paramMap.put("weight",
				furnitureitem.getWeight() + furnitureitem.getWeight_type());
		paramMap.put("itemid", String.valueOf(furnitureitem.getItemid()));
		// paramMap.put("photos", furnitureitem.getPhotos());
		// return namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_FURNITURE, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();

	}

	@Override
	public long addItems(Items items)
	{

		Map<String, String> paramMap = new HashMap<String, String>();

		// :itemdetailsid,:userid,:colpostcode,:colcountry,:delpostcode,:delcountry

		paramMap.put("description", items.getDescription());
		paramMap.put("photos", items.getPhotos());
		paramMap.put("millage", items.getMillage());
		paramMap.put("itemdetailsid", String.valueOf(items.getItemdetailsid()));
		paramMap.put("userid", String.valueOf(items.getUserid()));
		paramMap.put("colpostcode", items.getColpostcode());
		paramMap.put("colcountry", items.getColcountry());
		paramMap.put("delpostcode", items.getDelpostcode());
		paramMap.put("delcountry", items.getDelcountry());
		paramMap.put("coladdress", items.getColaddress());
		paramMap.put("deladdress", items.getDeladdress());
		paramMap.put("map", items.getMap());
		paramMap.put("itemtypeid", String.valueOf(items.getItemtypeid()));
		// namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_ITEMS, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();

	}

	@Override
	public List<Countries> retrieveCountries()
	{
		// TODO Auto-generated method stub
		Map<String, String> paramMap = new HashMap<String, String>();
		return namedParmJdbcTemplate.query(RETRIVE_COUNTRIES, paramMap,
				new BeanPropertyRowMapper<Countries>(Countries.class));

	}

	@Override
	public List<Items> retriveItems()
	{
		// TODO Auto-generated method stub

		Map<String, String> paramMap = new HashMap<String, String>();

		return namedParmJdbcTemplate.query(RETRIVE_ITEMS, paramMap,
				new BeanPropertyRowMapper<Items>(Items.class));

	}

	@Override
	public List<Items> retriveItems(int page, int numofrows)
	{
		// TODO Auto-generated method stub
		// int start,int numofvalue
		Map<String, String> paramMap = new HashMap<String, String>();

		return namedParmJdbcTemplate
				.query(TruckDbUtil.setQueryLimit(RETRIVE_ITEMS_LIMIT, page,
						numofrows), paramMap, new BeanPropertyRowMapper<Items>(
						Items.class));

	}

	@Override
	public List<Items> getItem(int id)
	{
		// TODO Auto-generated method stub

		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));

		return namedParmJdbcTemplate.query(GET_ITEMS_BY_ID, paramMap,
				new BeanPropertyRowMapper<Items>(Items.class));

	}

	@Override
	public List<Furnitureitem> getFurnitureItem(int id)
	{
		// TODO Auto-generated method stub
		// return null;

		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_FURNITURE_BY_ID, paramMap,
				new BeanPropertyRowMapper<Furnitureitem>(Furnitureitem.class));

	}

	@Override
	public long addMessage(Messages message)
	{
		// TODO Auto-generated method stub

		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("proownerid", String.valueOf(message.getProownerid()));
		paramMap.put("vclid", String.valueOf(message.getVclid()));
		paramMap.put("itemid", message.getItemid());
		paramMap.put("quoteid", String.valueOf(message.getQuoteid()));
		paramMap.put("message", message.getMessage());
		paramMap.put("messageid", message.getMessageid());
		// namedParmJdbcTemplate.update(ADD_MESSAGE, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_MESSAGE, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();

	}

	@Override
	public void updatePassword(String email, String Pass)
	{
		// TODO Auto-generated method stub
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("password", encpSha.encode(Pass, email));
		paramMap.put("email", email);
		namedParmJdbcTemplate.update(UPDATE_PASS, paramMap);

	}

	@Override
	public List<Furnitureitem> getFurnitureByItemID(int id)
	{
		// TODO Auto-generated method stub
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_FURNITURE_BY_ITEM_ID, paramMap,
				new BeanPropertyRowMapper<Furnitureitem>(Furnitureitem.class));

	}

	@Override
	public List<Category> retriveCategory()
	{
		// TODO Auto-generated method stub
		Map<String, String> paramMap = new HashMap<String, String>();
		return namedParmJdbcTemplate.query(RETRIVE_CATEGORY, paramMap,
				new BeanPropertyRowMapper<Category>(Category.class));

	}

	@Override
	public List<Subcategory> retriveSubCategoryByCategoryID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("categoryid", String.valueOf(id));
		return namedParmJdbcTemplate.query(RETRIVE_SUB_CATEGORY_BY_CATEGORY_ID,
				paramMap, new BeanPropertyRowMapper<Subcategory>(
						Subcategory.class));

	}

	@Override
	public long addGeneralitem(Generalitem generalitem)
	{
		// TODO Auto-generated method stub
		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("description", generalitem.getDescription());
		paramMap.put("subcategory", generalitem.getSubcategory());
		paramMap.put("length",
				generalitem.getLength() + generalitem.getDimension());
		paramMap.put("height",
				generalitem.getHeight() + generalitem.getDimension());
		paramMap.put("width",
				generalitem.getWidth() + generalitem.getDimension());
		paramMap.put("weight",
				generalitem.getWeight() + generalitem.getWeight_type());
		paramMap.put("itemid", String.valueOf(generalitem.getItemid()));
		// paramMap.put("photos", furnitureitem.getPhotos());
		// return namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_GENERAL, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();
	}

	@Override
	public long addCaritem(Caritem caritem)
	{
		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("make", caritem.getMake());
		paramMap.put("model", caritem.getModel());
		paramMap.put("modeofmoving", caritem.getModeofmoving());
		paramMap.put("itemid", String.valueOf(caritem.getItemid()));
		paramMap.put("description", caritem.getDescription());
		// return namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_CAR, paramSource, genKey.getHolder(),
				genKey.getPKName("id"));
		return genKey.getValue();
	}

	@Override
	public long addmotorcycle(Motorcyclesitem motorcyclesitem)
	{
		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("description", motorcyclesitem.getDescription());
		paramMap.put("make", motorcyclesitem.getMake());
		paramMap.put("model", motorcyclesitem.getModel());
		paramMap.put("modeofmoving", motorcyclesitem.getModeofmoving());
		paramMap.put("itemid", String.valueOf(motorcyclesitem.getItemid()));
		// paramMap.put("photos", furnitureitem.getPhotos());
		// return namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_MOTORCYCLE, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();
	}

	@Override
	public long addvechicleandparts(Vechicleandparts vechicleandparts)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("description", vechicleandparts.getDescription());
		paramMap.put("subcategory", vechicleandparts.getSubcategory());
		paramMap.put("vechicledescription",
				vechicleandparts.getVechicledescription());
		paramMap.put("length",
				vechicleandparts.getLength() + vechicleandparts.getDimension());
		paramMap.put("width",
				vechicleandparts.getWidth() + vechicleandparts.getDimension());
		paramMap.put("height",
				vechicleandparts.getHeight() + vechicleandparts.getDimension());
		paramMap.put(
				"weight",
				vechicleandparts.getWeight()
						+ vechicleandparts.getWeight_type());
		paramMap.put("ontrailer", vechicleandparts.getOntrailer());
		paramMap.put("itemid", String.valueOf(vechicleandparts.getItemid()));
		// return namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_VEHICLEANDPARTS, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();
	}

	@Override
	public long addhome(Homeitem homeitem)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("propertytype", homeitem.getProvertytype());
		paramMap.put("movingdate", homeitem.getMovingdate());
		paramMap.put("numrooms", homeitem.getNumbedrooms());
		paramMap.put("numfloors", homeitem.getNumfloor());
		paramMap.put("elevator", homeitem.getElevator());
		paramMap.put("packinghelp", homeitem.getPackinghelp());
		paramMap.put("loadinghelp", homeitem.getLoadinghelp());
		paramMap.put("itemid", String.valueOf(homeitem.getItemid()));
		// return namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_HOME, paramSource, genKey.getHolder(),
				genKey.getPKName("id"));
		return genKey.getValue();
	}

	@Override
	public long addboats(Boatitem boatitem)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("subcategory", boatitem.getSubcategory());
		paramMap.put("description", boatitem.getDescription());
		paramMap.put("typeofboat", boatitem.getTypeofboat());
		paramMap.put("length", boatitem.getLenth());
		paramMap.put("typeofkeel", boatitem.getTypeofkeel());
		paramMap.put("ontrailer", boatitem.getOntrailer());
		paramMap.put("itemid", String.valueOf(boatitem.getItemid()));
		// return namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_BOATS, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();
	}

	@Override
	public long addhaulage(Haulageitem haulageitem)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("subcategory", haulageitem.getSubcategory());
		paramMap.put("description", haulageitem.getDescription());
		paramMap.put("haulagedescription", haulageitem.getDescription());
		paramMap.put("packagedescription", haulageitem.getPackagedescription());
		paramMap.put("relevantitem", haulageitem.getRelevantitem());
		paramMap.put("weight", haulageitem.getWeight());
		paramMap.put("itemid", String.valueOf(haulageitem.getItemid()));
		// return namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_HAULAGE, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();
	}

	@Override
	public long addFragilegoods(Fragilegoodsitem fragilegoodsitem)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("subcategory", fragilegoodsitem.getSubcategory());
		paramMap.put("description", fragilegoodsitem.getDescription());
		paramMap.put("fragiledescription",
				fragilegoodsitem.getFragiledescription());
		paramMap.put("length", fragilegoodsitem.getLength());
		paramMap.put("width", fragilegoodsitem.getWidth());
		paramMap.put("height", fragilegoodsitem.getHeight());
		paramMap.put("weight", fragilegoodsitem.getWeight());
		paramMap.put("itemid", String.valueOf(fragilegoodsitem.getItemid()));
		// return namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_FRAGILEGOODS, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();
	}

	@Override
	public long addLivestock(Livestockitem livestockitem)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("subcategory", livestockitem.getSubcategory());
		paramMap.put("description", livestockitem.getDescription());
		paramMap.put("breed", livestockitem.getBreed());
		paramMap.put("numitems", livestockitem.getNumitems());
		paramMap.put("length",
				livestockitem.getLength() + livestockitem.getDimension());
		paramMap.put("width",
				livestockitem.getWidth() + livestockitem.getDimension());

		paramMap.put("height",
				livestockitem.getHeight() + livestockitem.getDimension());
		paramMap.put("weight",
				livestockitem.getWeight() + livestockitem.getWeight_type());
		paramMap.put("itemid", String.valueOf(livestockitem.getItemid()));
		// return namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_LIVESTOCK, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();
	}

	@Override
	public long addOthers(Otheritem otheritem)
	{
		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("description", otheritem.getDescription());

		paramMap.put("length", otheritem.getLength());
		paramMap.put("height", otheritem.getHeight());
		paramMap.put("width", otheritem.getWidth());
		paramMap.put("weight", otheritem.getWeight());
		paramMap.put("itemid", String.valueOf(otheritem.getItemid()));
		// paramMap.put("photos", furnitureitem.getPhotos());
		// return namedParmJdbcTemplate.update(ADD_ITEMS, paramMap);

		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_OTHER, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();
	}

	@Override
	public List<Generalitem> getGeneralItem(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_GENERAL_BY_ID, paramMap,
				new BeanPropertyRowMapper<Generalitem>(Generalitem.class));

	}

	@Override
	public List<Generalitem> getGeneralByItemID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_GENERAL_BY_ITEM_ID, paramMap,
				new BeanPropertyRowMapper<Generalitem>(Generalitem.class));

	}

	@Override
	public List<Caritem> getCarItem(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_CAR_BY_ID, paramMap,
				new BeanPropertyRowMapper<Caritem>(Caritem.class));

	}

	@Override
	public List<Caritem> getCarByItemID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_CAR_BY_ITEM_ID, paramMap,
				new BeanPropertyRowMapper<Caritem>(Caritem.class));

	}

	@Override
	public List<Motorcyclesitem> getMotorcyclesItem(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_MOTORCYCLE_BY_ID, paramMap,
				new BeanPropertyRowMapper<Motorcyclesitem>(
						Motorcyclesitem.class));

	}

	@Override
	public List<Motorcyclesitem> getMotorcyclesByItemID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_MOTORCYCLE_BY_ITEM_ID, paramMap,
				new BeanPropertyRowMapper<Motorcyclesitem>(
						Motorcyclesitem.class));

	}

	@Override
	public List<Vechicleandparts> getVechicleandpartsItem(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_VEHICLEANDPARTS_BY_ID, paramMap,
				new BeanPropertyRowMapper<Vechicleandparts>(
						Vechicleandparts.class));

	}

	@Override
	public List<Vechicleandparts> getVechicleandpartsByItemID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_VEHICLEANDPARTS_BY_ITEM_ID,
				paramMap, new BeanPropertyRowMapper<Vechicleandparts>(
						Vechicleandparts.class));

	}

	@Override
	public List<Homeitem> getHomeItem(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_HOME_BY_ID, paramMap,
				new BeanPropertyRowMapper<Homeitem>(Homeitem.class));

	}

	@Override
	public List<Homeitem> getHomeByItemID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_HOME_BY_ITEM_ID, paramMap,
				new BeanPropertyRowMapper<Homeitem>(Homeitem.class));

	}

	@Override
	public List<Boatitem> getBoatItem(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_BOATS_BY_ID, paramMap,
				new BeanPropertyRowMapper<Boatitem>(Boatitem.class));

	}

	@Override
	public List<Boatitem> getBoatByItemID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_BOATS_BY_ITEM_ID, paramMap,
				new BeanPropertyRowMapper<Boatitem>(Boatitem.class));

	}

	@Override
	public List<Haulageitem> getHaulageItem(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_HAULAGE_BY_ID, paramMap,
				new BeanPropertyRowMapper<Haulageitem>(Haulageitem.class));

	}

	@Override
	public List<Haulageitem> getHaulageByItemID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_HAULAGE_BY_ITEM_ID, paramMap,
				new BeanPropertyRowMapper<Haulageitem>(Haulageitem.class));

	}

	@Override
	public List<Fragilegoodsitem> getFragilegoodsItem(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_FRAGILEGOODS_BY_ID, paramMap,
				new BeanPropertyRowMapper<Fragilegoodsitem>(
						Fragilegoodsitem.class));

	}

	@Override
	public List<Fragilegoodsitem> getFragilegoodsByItemID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_FRAGILEGOODS_BY_ITEM_ID,
				paramMap, new BeanPropertyRowMapper<Fragilegoodsitem>(
						Fragilegoodsitem.class));

	}

	@Override
	public List<Livestockitem> getLivestockItem(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_LIVESTOCK_BY_ID, paramMap,
				new BeanPropertyRowMapper<Livestockitem>(Livestockitem.class));

	}

	@Override
	public List<Livestockitem> getLivestockByItemID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_LIVESTOCK_BY_ITEM_ID, paramMap,
				new BeanPropertyRowMapper<Livestockitem>(Livestockitem.class));

	}

	@Override
	public List<Otheritem> getOtherItem(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_OTHER_BY_ID, paramMap,
				new BeanPropertyRowMapper<Otheritem>(Otheritem.class));

	}

	@Override
	public List<Otheritem> getOtherByItemID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(GET_OTHER_BY_ITEM_ID, paramMap,
				new BeanPropertyRowMapper<Otheritem>(Otheritem.class));

	}

	@Override
	public void addItemImage(String name, int itemid, int itemdetailid)
	{
		// TODO Auto-generated method stub
		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("itemid", String.valueOf(itemid));
		paramMap.put("itemdetailid", String.valueOf(itemdetailid));
		paramMap.put("imagename", name);

		namedParmJdbcTemplate.update(ADD_IMAGE, paramMap);

	}

	@Override
	public List<ItemImages> retriveItemImagesByItemID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(id));
		return namedParmJdbcTemplate.query(RETRIVE_IMAGE_BY_ITEM_ID, paramMap,
				new BeanPropertyRowMapper<ItemImages>(ItemImages.class));

	}

	@Override
	public long addUser(Users users)
	{
		// TODO Auto-generated method stub

		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("username", users.getEmail());
		paramMap.put("role", users.getRole());
		paramMap.put("password",
				encpSha.encode(users.getPassword(), users.getEmail()));
		paramMap.put("email", users.getEmail());
		paramMap.put("shortname", users.getShortname());
		paramMap.put("isactive", String.valueOf(0));

		// return namedParmJdbcTemplate.update(ADD_USER_SIGNUP, paramMap);
		SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
		AutoGeneratedKey genKey = AutoGeneratedKey.getInstance();
		namedParmJdbcTemplate.update(ADD_USER_SIGNUP, paramSource,
				genKey.getHolder(), genKey.getPKName("id"));
		return genKey.getValue();

	}

	@Override
	public void addUserDetails(Users users)
	{
		// TODO Auto-generated method stub firstname,lastname,telephone,mobile,
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("userid", String.valueOf(users.getId()));
		paramMap.put("email", users.getEmail());
		paramMap.put("firstname", " ");
		paramMap.put("lastname", " ");
		paramMap.put("telephone", " ");
		paramMap.put("mobile", users.getMobile());
		System.out.println("test" + users.getMobile());
		// return namedParmJdbcTemplate.update(ADD_USER_SIGNUP, paramMap);

		namedParmJdbcTemplate.update(ADD_USER_DETAILS, paramMap);

	}

	@Override
	public void addUserDetailsTP(Userdetails userdetails)
	{
		// TODO Auto-generated method stub

		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("userid", String.valueOf(userdetails.getId()));
		paramMap.put("email", userdetails.getEmail());
		paramMap.put("firstname", userdetails.getFirstname());
		paramMap.put("lastname", userdetails.getLastname());
		paramMap.put("telephone", userdetails.getTelephone());
		paramMap.put("mobile", userdetails.getMobile());
		paramMap.put("city", userdetails.getCity());
		paramMap.put("country", userdetails.getCountry());
		paramMap.put("address1", userdetails.getAddress1());
		paramMap.put("address2", userdetails.getAddress2());
		paramMap.put("companyname", userdetails.getCompanyname());
		paramMap.put("postcode", userdetails.getPostcode());
		paramMap.put("taxnumber", userdetails.getTaxnumber());
		paramMap.put("vehiclenumber", userdetails.getVehiclenumber());

		namedParmJdbcTemplate.update(ADD_USER_DETAILS_TP, paramMap);

	}

	@Override
	public void updateItemImage(String imagename, int id)
	{
		// TODO Auto-generated method stub
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("id", String.valueOf(id));
		paramMap.put("photos", imagename);
		namedParmJdbcTemplate.update(UPDATE_IMAGE_BY_ITEM_ID, paramMap);

	}

	@Override
	public List<Messages> retriveMessageByMessageID(int id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("messageid", String.valueOf(id));

		return namedParmJdbcTemplate.query(RETRIVE_MESSAGE_GROUP_BY_MESSAGE_ID,
				paramMap, new BeanPropertyRowMapper<Messages>(Messages.class));

	}

	@Override
	public List<Messages> retriveMessageByItemVclID(int itemid, int vclid)
	{
		// TODO Auto-generated method stub
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(itemid));
		paramMap.put("vclid", String.valueOf(vclid));
		return namedParmJdbcTemplate.query(RETRIVE_MESSAGE_BY_ITEM_VCL_ID,
				paramMap, new BeanPropertyRowMapper<Messages>(Messages.class));

	}

	@Override
	public List<Messages> retriveMessageByProID(int proid)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("proownerid", String.valueOf(proid));
		return namedParmJdbcTemplate.query(RETRIVE_MESSAGE_BY_PRO_ID, paramMap,
				new BeanPropertyRowMapper<Messages>(Messages.class));

	}

	@Override
	public void addMessageDetails(Messages message)
	{
		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("messageuid", message.getMessageuid());
		paramMap.put("message", message.getMessage());
		paramMap.put("messageid", message.getMessageid());
		paramMap.put("userid", message.getUserid());

		namedParmJdbcTemplate.update(ADD_MESSAGE_DETAILS, paramMap);

	}

	@Override
	public List<Messages> getMessageByMessageID(int id)
	{
		// TODO Auto-generated method stub
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("messageid", String.valueOf(id));

		return namedParmJdbcTemplate.query(RETRIVE_MESSAGE_BY_MESSAGE_ID,
				paramMap, new BeanPropertyRowMapper<Messages>(Messages.class));

	}

	@Override
	public List<Messages> retriveMessageByVCLID(int vclid)
	{
		// TODO Auto-generated method stub
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("vclid", String.valueOf(vclid));
		return namedParmJdbcTemplate.query(RETRIVE_MESSAGE_BY_VCL_ID, paramMap,
				new BeanPropertyRowMapper<Messages>(Messages.class));

	}

	@Override
	public List<Messages> retriveMessageByItemID(int itemid)
	{
		// TODO Auto-generated method stub
		// return null;

		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(itemid));
		return namedParmJdbcTemplate.query(RETRIVE_MESSAGE_BY_ITEM_ID,
				paramMap, new BeanPropertyRowMapper<Messages>(Messages.class));

	}

	@Override
	public List<Users> getShortnameByMailID(String mail)
	{
		// TODO Auto-generated method stub
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("username", mail);
		return namedParmJdbcTemplate.query(GET_SHORTNAME_BY_MAIL, paramMap,
				new BeanPropertyRowMapper<Users>(Users.class));

	}

	@Override
	public void updateMessageReadByID(int id)
	{
		// TODO Auto-generated method stub

		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("messageuid", String.valueOf(id));
		namedParmJdbcTemplate.update(UPDATE_MESSAGE_READ_BY_MSG_ID, paramMap);

	}

	@Override
	public List<Messages> retriveMessageByItemProID(int itemid, int proid)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("itemid", String.valueOf(itemid));
		paramMap.put("proownerid", String.valueOf(proid));
		return namedParmJdbcTemplate.query(RETRIVE_MESSAGE_BY_ITEM_PRO_ID,
				paramMap, new BeanPropertyRowMapper<Messages>(Messages.class));

	}

	@Override
	public void addStarrating(Starrating star)
	{
		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("quoteid", String.valueOf(star.getQuoteid()));
		paramMap.put("numstar", String.valueOf(star.getNumstar()));
		paramMap.put("comments", star.getComments());

		namedParmJdbcTemplate.update(ADD_FEEDBACK, paramMap);

	}

	@Override
	public List<Items> retriveUpgradeItems()
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		return namedParmJdbcTemplate.query(RETRIVE_UPGRADE_ITEMS, paramMap,
				new BeanPropertyRowMapper<Items>(Items.class));

	}

	@Override
	public int getItemTotalCount()
	{
		// TODO Auto-generated method stub

		Map<String, String> paramMap = new HashMap<String, String>();
		/*
		 * return namedParmJdbcTemplate.query(RETRIVE_ITEMS_TOTAL_COUNT,
		 * paramMap,new BeanPropertyRowMapper<Items>(Items.class));
		 */

		int total =
				namedParmJdbcTemplate.queryForInt(RETRIVE_ITEMS_TOTAL_COUNT,
						paramMap);

		return total;

	}

	@Override
	public List<Users> getUserDetailsByID(String username)
	{

		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("shortname", username);

		return namedParmJdbcTemplate.query(GET_USERDETAILS_BY_USERNAME,
				paramMap, new BeanPropertyRowMapper<Users>(Users.class));

	}

	@Override
	public void ActiveAccountByToken(String token, String id)
	{
		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("password", token);
		paramMap.put("id", id);
		namedParmJdbcTemplate.update(ACTIVE_ACCOUNT_BY_TOKEN, paramMap);

	}

	@Override
	public List<Items> retriveCountrySearchItems(List<String> colcountry,
			List<String> delcountry, List<String> itemtypeid, int start,
			int numofvalue)
	{
		// TODO Auto-generated method stub

		Map<String, Object> paramMap = new HashMap<String, Object>();
		// List<String> paramMap = new ArrayList<String>();

		paramMap.put("colcountry", colcountry);
		paramMap.put("delcountry", delcountry);
		paramMap.put("itemtypeid", itemtypeid);

		return namedParmJdbcTemplate.query(
				TruckDbUtil.setQueryLimit(COUNTRY_SEARCH, start, numofvalue),
				paramMap, new BeanPropertyRowMapper<Items>(Items.class));

	}

	@Override
	public int getCountrySearchItemTotalCount(List<String> colcountry,
			List<String> delcountry, List<String> itemtypeid)
	{

		Map<String, Object> paramMap = new HashMap<String, Object>();

		paramMap.put("colcountry", colcountry);
		paramMap.put("delcountry", delcountry);
		paramMap.put("itemtypeid", itemtypeid);

		int total =
				namedParmJdbcTemplate.queryForInt(
						COUNTRY_SEARCH_FOR_TOTAL_COUNT, paramMap);

		return total;
	}

	@Override
	public List<Items> retriveRouteSearchItems(List<String> colcountry,
			List<String> delcountry, List<String> itemtypeid,
			String colpostcode, String delpostcode, String km, int start,
			int numofvalue)
	{
		Map<String, Object> paramMap = new HashMap<String, Object>();
		// List<String> paramMap = new ArrayList<String>();

		paramMap.put("colcountry", colcountry);
		paramMap.put("delcountry", delcountry);
		paramMap.put("itemtypeid", itemtypeid);
		paramMap.put("colpostcode", colpostcode);
		paramMap.put("delpostcode", delpostcode);
		paramMap.put("millagegreater", Integer.parseInt(km) - 10);
		paramMap.put("millageless", km);
		return namedParmJdbcTemplate.query(
				TruckDbUtil.setQueryLimit(ROUTE_SEARCH, start, numofvalue),
				paramMap, new BeanPropertyRowMapper<Items>(Items.class));

	}

	@Override
	public int getCountryRouteItemTotalCount(List<String> colcountry,
			List<String> delcountry, List<String> itemtypeid,
			String colpostcode, String delpostcode, String km)
	{
		Map<String, Object> paramMap = new HashMap<String, Object>();

		paramMap.put("colcountry", colcountry);
		paramMap.put("delcountry", delcountry);
		paramMap.put("itemtypeid", itemtypeid);
		paramMap.put("colpostcode", colpostcode);
		paramMap.put("delpostcode", delpostcode);
		paramMap.put("millagegreater", Integer.parseInt(km) - 10);
		paramMap.put("millageless", km);
		int total =
				namedParmJdbcTemplate.queryForInt(ROUTE_SEARCH_FOR_TOTAL_COUNT,
						paramMap);

		return total;
	}

	@Override
	public List<Items> retriveLocalSearchItems(List<String> itemtypeid,
			String postcode, String km, int start, int numofvalue)
	{
		Map<String, Object> paramMap = new HashMap<String, Object>();
		// List<String> paramMap = new ArrayList<String>();

		paramMap.put("itemtypeid", itemtypeid);
		paramMap.put("postcode", postcode);

		return namedParmJdbcTemplate.query(
				TruckDbUtil.setQueryLimit(LOCAL_SEARCH, start, numofvalue),
				paramMap, new BeanPropertyRowMapper<Items>(Items.class));

	}

	@Override
	public int getCountryLocalItemTotalCount(List<String> itemtypeid,
			String postcode, String km, int start, int numofvalue)
	{
		Map<String, Object> paramMap = new HashMap<String, Object>();

		paramMap.put("itemtypeid", itemtypeid);
		paramMap.put("postcode", postcode);

		int total =
				namedParmJdbcTemplate.queryForInt(LOCAL_SEARCH_FOR_TOTAL_COUNT,
						paramMap);

		return total;
	}

	@Override
	public List<Items> retriveCountrySearchItems(String colcountry,
			String delcountry, String[] itemtypeid)
	{

		Map<String, Object> paramMap = new HashMap<String, Object>();
		/*
		 * //List<String> paramMap = new ArrayList<String>();
		 * 
		 * paramMap.put("colcountry", colcountry); paramMap.put("delcountry",
		 * delcountry); paramMap.put("itemtypeid", itemtypeid);
		 */

		return namedParmJdbcTemplate.query(COUNTRY_SEARCH, paramMap,
				new BeanPropertyRowMapper<Items>(Items.class));
	}

	@Override
	public List<Items> retriveRecentDeliverys()
	{
		Map<String, String> paramMap = new HashMap<String, String>();

		return namedParmJdbcTemplate.query(RETRIVE_RECENT_DELIVERYS, paramMap,
				new BeanPropertyRowMapper<Items>(Items.class));

	}

	@Override
	public void addTpDaetails(Crawl crawl)
	{

		Map<String, String> paramMap = new HashMap<String, String>();

		paramMap.put("deadline", crawl.getDeadline());
		paramMap.put("tpfrom", crawl.getTpfrom());
		paramMap.put("tpto", crawl.getTpto());
		paramMap.put("length", crawl.getLength());
		paramMap.put("weight", crawl.getWeight());
		paramMap.put("setup", crawl.getSetup());

		// return namedParmJdbcTemplate.update(ADD_USER_SIGNUP, paramMap);

		namedParmJdbcTemplate.update(ADD_TP, paramMap);
	}

	@Override
	public List<Crawl> retriveTpDetails()
	{
		Map<String, String> paramMap = new HashMap<String, String>();

		return namedParmJdbcTemplate.query(RETRIVE_TPDETAILS, paramMap,
				new BeanPropertyRowMapper<Crawl>(Crawl.class));

	}

	@Override
	public List<Userdetails> getFeedBackUserDetails(int VCL_ID)
	{
		Map map = new HashMap();
		map.put("id", VCL_ID);
		// TODO Auto-generated method stub
		return namedParmJdbcTemplate.query(GET_FEEDBACK_USER_DETAILS, map,
				new BeanPropertyRowMapper(Userdetails.class));
	}

	@Override
	public List<Starrating> getStartRating(int VCL_ID)
	{
		Map map = new HashMap();
		map.put("id", VCL_ID);
		return namedParmJdbcTemplate.query(GET_STARRATING_DETAILS, map,
				new BeanPropertyRowMapper(Starrating.class));
	}

	@Override
	public List<Starrating> getStartRatingComments(int vCL_ID)
	{

		Map map = new HashMap();
		map.put("id", vCL_ID);

		return namedParmJdbcTemplate.query(GET_STARRATIGN_COMMANDS_DETAILS,
				map, new BeanPropertyRowMapper(Starrating.class));
	}

	@Override
	public List<Countries> getCountries()
	{
		Map map = new HashMap();

		return namedParmJdbcTemplate.query(GET_ALL_COUNTRY, map,
				new BeanPropertyRowMapper(Countries.class));
	}

}
